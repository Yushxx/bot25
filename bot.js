const { Telegraf } = require('telegraf');
const axios = require('axios');
const http = require('http');

// Remplacez par votre jeton de bot Telegram
const bot = new Telegraf('7282753875:AAEcih5wYDaniimZD_5lWt3qhn7ElhQvGl4');

// URL des scripts PHP pour lire et √©crire les donn√©es
const readDataUrl = 'https://solkah.org/app/read_data.php';
const updateDataUrl = 'https://solkah.org/app/update_data.php';

// Lire les donn√©es depuis data.txt
async function readData() {
  try {
    const response = await axios.get(readDataUrl);
    const data = JSON.parse(response.data.data);
    return data;
  } catch (error) {
    console.error('Erreur lors de la lecture des donn√©es:', error);
    return [];
  }
}

// Mettre √† jour les donn√©es dans data.txt
async function updateData(data) {
  try {
    const response = await axios.post(updateDataUrl, { data: JSON.stringify(data) });
    return response.data;
  } catch (error) {
    console.error('Erreur lors de la mise √† jour des donn√©es:', error);
    return null;
  }
}

// Commande /start
bot.start(async (ctx) => {
  const userId = ctx.message.from.id;
  const username = ctx.message.from.username || 'Utilisateur';
  const referrerId = ctx.startPayload; // Utilis√© pour les parrainages

  // Lire les donn√©es depuis data.txt
  const data = await readData();
  let user = data.find(user => user.id === userId);

  if (!user) {
    // Enregistrer un nouvel utilisateur dans data.txt
    user = {
      id: userId,
      username: username,
      balance: 0,
      invited_count: 0
    };
    data.push(user);
    await updateData({ data: JSON.stringify(data) });

    // Mettre √† jour le compteur d'invit√©s du parrain
    if (referrerId) {
      const referrer = data.find(user => user.id === referrerId);
      if (referrer) {
        referrer.invited_count += 1;
        await updateData({ data: JSON.stringify(data) });
      }
    }
  }

  ctx.reply(`Salut ${username}, bienvenue dans le programme de r√©compense GxGcash. Veuillez rejoindre les canaux ci-dessous avant de continuer:

üëâ: [Rejoindre solkah](https://t.me/+YbIDtsrloZZiNmE0)

üëâ : [ Rejoindre Jushey Money‚ì• ](https://t.me/+qm3jHNWSJYtlOTJk)`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'Check', callback_data: 'check' }]
      ]
    },
    parse_mode: 'Markdown'
  });
});

// Commande pour v√©rifier l'adh√©sion aux canaux
bot.action('check', async (ctx) => {
  const userId = ctx.from.id;

  try {
    const [member1, member2] = await Promise.all([
      bot.telegram.getChatMember('-1001923341484', userId),
      bot.telegram.getChatMember('-1002191790432', userId)
    ]);

    if (['member', 'administrator', 'creator'].includes(member1.status) &&
        ['member', 'administrator', 'creator'].includes(member2.status)) {
      ctx.reply('Bienvenue au tableau de bord', {
        reply_markup: {
          keyboard: [
            [{ text: 'Mon compte üë•' }, { text: 'Inviterü´Ç' }],
            [{ text: 'Play to win üéÆ' }, { text: 'Withdrawalüí∞' }],
            [{ text: 'Supportüì©' }]
          ],
          resize_keyboard: true,
          one_time_keyboard: false
        }
      });
    } else {
      ctx.reply('Veuillez rejoindre les canaux avant de continuer.');
    }
  } catch (err) {
    console.error('Erreur lors de la v√©rification des membres:', err);
    ctx.reply('Une erreur est survenue lors de la v√©rification. Veuillez r√©essayer.');
  }
});

// Mon compte
bot.hears('Mon compte üë•', async (ctx) => {
  const userId = ctx.message.from.id;

  const data = await readData();
  const user = data.find(user => user.id === userId);

  if (user) {
    const balance = user.invited_count * 700; // Calculer le solde
    ctx.reply(`ü§¥üèª Mon compte\nüÜî ID: ${user.id}\nüí∞Balance: ${balance} Fcfa\nü´ÇInvit√©s: ${user.invited_count}`);
  } else {
    ctx.reply('Utilisateur non trouv√©.');
  }
});

// Inviter
bot.hears('Inviterü´Ç', (ctx) => {
  const userId = ctx.message.from.id;
  ctx.reply(`Partager ce lien et gagnez 700 Fcfa √† chaque invit√©:\nLien: t.me/GxGcashbot?start=${userId}`);
});

// Play to win üéÆ
bot.hears('Play to win üéÆ', (ctx) => {
  const userId = ctx.message.from.id;
  const playLink = `http://t.me/GxGcashbot/tap?ref=${userId}`;
  ctx.reply(`Taper et gagner des pi√®ces\n\nVotre code d'acc√®s: ${userId}\n\nCliquez en bas pour commencer`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'Play', url: playLink }]
      ]
    }
  });
});

// Withdrawal
bot.hears('Withdrawalüí∞', async (ctx) => {
  const userId = ctx.message.from.id;

  const data = await readData();
  const user = data.find(user => user.id === userId);

  if (user) {
    const balance = user.invited_count * 700; // Calculer le solde
    if (balance >= 30000) {
      ctx.reply('Envoyez votre mode de paiement.');
    } else {
      ctx.reply('Le minimum de retrait est de 30.000 Fcfa.');
    }
  } else {
    ctx.reply('Utilisateur non trouv√©.');
  }
});

// Support
bot.hears('Supportüì©', (ctx) => {
  ctx.reply('Contact: @Medatt00');
});

bot.launch();
console.log('Bot d√©marr√©');

// Code keep_alive pour √©viter que le bot ne s'endorme
http.createServer(function (req, res) {
    res.write("I'm alive");
    res.end();
}).listen(8080);
